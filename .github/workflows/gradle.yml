# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      docker-version: ${{ steps.docker-version.outputs.docker-version }}
    steps:
      - uses: actions/checkout@v3
      - name: write output to step
        id:   docker-version
        run:  echo 'docker-version=1.0.3' >> $GITHUB_OUTPUT

      - name: test version
        run:  echo '${{ steps.docker-version.outputs.docker-version }}'

      - name: update Docker version
        id:   new-docker-version
        run:  |
              chmod 775 ./new.sh
              version=${{ steps.docker-version.outputs.docker-version }}
              first_field=$(echo "$version" | cut -d '.' -f 1)
              second_field=$(echo "$version" | cut -d '.' -f 2)
              third_field=$(echo "$version" | cut -d '.' -f 3)
              third_field=$((third_field + 1))
              echo "new_version=${first_field}.${second_field}.${third_field}" >> $GITHUB_ENV
      #              echo 'new-docker-version=$new_version' >> $GITHUB_OUTPUT
      #              source ./new.sh ${{ steps.docker-version.outputs.docker-version }}
      #              echo $new_version
      #              echo 'new-docker-version=$new_version' >> $GITHUB_OUTPUT

      - name: test new version
        run:  |
              echo "new_version=$new_version"
#              echo '${{ steps.new-docker-version.outputs.new-docker-version }}'

#    - name: Set up JDK 11
#      uses: actions/setup-java@v3
#      with:
#        java-version: '11'
#        distribution: 'temurin'
#
#    - name: Run chmod to make gradlew executable
#      run: chmod +x ./gradlew
#
#    - name: Build with Gradle
#      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
#      with:
#        arguments: build
#
#    - name: Upload artifact
#      uses: actions/upload-artifact@v2
#      with:
#        name: cicdsample
#        path: build/libs/*.jar
#
#    - name: push image
#      run: |
#        docker build -t yunsinyoung/demo:${{ steps.docker-version.outputs.docker-version }} .
#        docker login -u nalraysy3@gmail.com -p ${{ secrets.DOCKER_PASSWORD }}
#        docker push yunsinyoung/demo:${{ steps.docker-version.outputs.docker-version }}

#  print-ouput:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Target Repository
#        uses: actions/checkout@v2
#        with:
#          repository: yunsinyoung/github-action-demo
#          ref: argocd
#          path: argocd
#
##      - name: Replace image tag
##        uses: mikefarah/yq@master
##        env:
##          IMAGE_TAG: $
##        with:
##          cmd: yq eval -i '.image.tag = env(IMAGE_TAG)' 'deploy-k8s/demo/values.yaml'
#
#      - name: print output
#        run: |
#            echo "${{ needs.build.outputs.docker-version }}"
#            pwd


#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: cicdsample
#      - name: SCP transfer
#        uses: appleboy/scp-action@master
#        with:
#          username: root
#          host: 106.10.42.15
#          port: 2222
##          password: ${{ secrets.SSH_PASSWORD }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          rm: true
#          source: /home/runner/work/github-action-demo/github-action-demo
#          target: /home
#          strip_components: 1
#      - name: Deploy
#        uses: appleboy/ssh-action@master
#        with:
#          host: 106.10.42.15
#          username: root
##          password: ${{ secrets.SSH_PASSWORD }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: 2222
#          command_timeout: 2m
#          script: |
#            cd /home/workspace
#            fuser -k -n tcp 8080
#            nohup java -jar github-action-demo-0.0.1-SNAPSHOT.jar > nohup.out &